<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

    
	
    <!--  数据源配置 -->
    <bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${db.driverClassName}" />
		<property name="url" value="${db.url}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="maxActive" value="${dataSource.maxActive}" />
		<property name="maxIdle" value="${dataSource.maxIdle}" />
		<property name="minIdle" value="${dataSource.minIdle}" />
		<property name="maxWait" value="${dataSource.maxWait}" />
		<property name="defaultAutoCommit"
			value="${dataSource.defaultAutoCommit}" />
		<property name="removeAbandoned"
			value="${dataSource.removeAbandoned}" />
		<property name="removeAbandonedTimeout"
			value="${dataSource.removeAbandonedTimeout}" />
		<property name="logAbandoned"
			value="${dataSource.logAbandoned}" />			
		<property name= "testWhileIdle" value="${dataSource.testWhileIdle}" />
        <property name= "testOnBorrow" value="${dataSource.testOnBorrow}" />
        <property name= "testOnReturn" value="${dataSource.testOnReturn}" />
        <!--  <property name= "validationQuery" value="SELECT COUNT(1) FROM DUAL" />-->
        <property name= "timeBetweenEvictionRunsMillis" value="30000" />
        <property name= "numTestsPerEvictionRun" value="${dataSource.maxActive}" />
        <property name= "minEvictableIdleTimeMillis" value="1800000" />
	</bean>
	
	<!-- iBatis配置 -->
	<bean id="sqlMapClient"
		class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
		   <value>classpath:sql-map-config.xml</value>
		</property>
		<property name="mappingLocations">
			<value>classpath:com/**/sql-*.xml</value>
		</property>
	</bean>

	<!-- 这里配置数据库properties文件位置 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
		    <list>
			    <value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- SpringContextHandler定义 -->
	<bean id="springContextHolder" class="com.jshx.core.utils.SpringContextHolder" lazy-init="false"/>
	
		
	<bean id="nativeJdbcExtractor"
		class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor"
		lazy-init="true" />
	<!-- Oracle的BLOB、CLOB字段处理类 -->
	<bean id="oracleLobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler"
		lazy-init="true">
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor" />
	</bean>
	
	<context:annotation-config />
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<context:component-scan base-package="com" />
    <aop:aspectj-autoproxy proxy-target-class="true" />
    
    
    <!-- 框架所用设置 -->
	<import resource="applicationContext-hibernate.xml" /> 
	<import resource="applicationContext-jdbc.xml" />
	<import resource="applicationContext-security.xml" />
	<import resource="applicationContext-quartz.xml" />
	<!--  <import resource="workflow/applicationContext-resources.xml" />--> 
	
	<!-- 启用aop 
	<aop:aspectj-autoproxy/>-->
	<!--配置com.jshk.*.service包下所有类或接口的public方法-->
	<aop:config>  
        <aop:aspect id="AspectFactory" ref="aspectFactory">  
            <aop:pointcut id="businessService"  
                expression="(execution(public * com.jshx..*.service..*.*(..)) or execution(public * com.wzxx..*.service..*.*(..)))" />  
            <aop:before pointcut-ref="businessService" method="doBefore"/>  
            <aop:after-returning pointcut-ref="businessService" method="doAfter" returning="retVal"/>  
            <aop:around pointcut-ref="businessService" method="doAround"/>  
            <aop:after-throwing pointcut-ref="businessService" method="doThrowing" throwing="ex"/>  
        </aop:aspect>  
    </aop:config>  
    <!-- Service的AOP配置 -->
    <bean id="aspectFactory" class="com.jshx.core.base.aop.AspectFactory">
        <property name="adviceMap">
            <map>
                <!-- 此处填写AOP的切入点以及Advice类：key为AOP切入点；value为Advice类bean的id
                <entry key="com.jshx.module.admin.service.impl.UserServiceImpl.modify" value="userAspect"/>
                -->
                <!-- 批量查询日志示例，此处根据项目具体需求配置  -->
                <entry key="com.jshx.temp.service.impl.TestFormServiceImpl.findByPage" value="batchQueryLogAdvice"/>
            </map>
        </property>
    </bean>
    
    <!-- 批量查询日志 -->
    <bean id="batchQueryLogAdvice" class="com.jshx.log.listener.BatchQueryLogAdvice"></bean>
    
    <!-- 配置AOP的Advice类，该类必须实现com.jshx.core.base.aop.AfterAvice、com.jshx.core.base.aop.BeforeAvice、
    com.jshx.core.base.aop.AroundAvice、com.jshx.core.base.aop.ExceptionAvice接口
    <bean id="userAspect" class="com.jshx.test.aop.UserAspect"/>
    -->
    	
	<!-- 具体业务配置 -->
	<import resource="classpath:com/jshx/**/applicationContext-*.xml"/>
    <import resource="classpath:com/jshx/module/form/conf/applicationContext-*.xml"/>
		
	<!-- Activiti begin -->	

    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">  
        <property name="dataSource" ref="dataSource" />  
        <property name="transactionManager" ref="transactionManager" />  
        <property name="databaseSchemaUpdate" value="false" />  
        <property name="jobExecutorActivate" value="false" />  
        <property name="history" value="full" />  
        <property name="transactionsExternallyManaged" value="true" />  
        
        <property name="expressionManager">  
            <bean class="com.jshx.activiti.spring.SpringExpressionManagerFactoryBean">  
				<property name="processEngineConfiguration" ref="processEngineConfiguration"></property>  
            </bean>  
        </property>  
	    <property name="customSessionFactories">  
	        <list>  
	            <bean class="com.jshx.activiti.service.identity.CustomUserEntityManagerFactory" />  
	            <bean class="com.jshx.activiti.service.identity.CustomGroupEntityManagerFactory" />  
	        </list>  
	     </property>  
    </bean>  
      
    <bean id="processEngine" factory-bean="processEngineConfiguration" factory-method="buildProcessEngine">  
    </bean>  
  
    <bean id="repositoryService" factory-bean="processEngineConfiguration" factory-method="getRepositoryService" />  
    <bean id="runtimeService" factory-bean="processEngineConfiguration" factory-method="getRuntimeService" />  
    <bean id="formService" factory-bean="processEngineConfiguration" factory-method="getFormService" />  
    <bean id="identityService" factory-bean="processEngineConfiguration" factory-method="getIdentityService" />  
    <bean id="taskService" factory-bean="processEngineConfiguration" factory-method="getTaskService" />  
    <bean id="historyService" factory-bean="processEngineConfiguration" factory-method="getHistoryService" />  
    <bean id="managementService" factory-bean="processEngineConfiguration" factory-method="getManagementService" /> 
     
    <!-- Activiti end  --> 

    
    <!-- 导入system.properties -->
	<bean id="SysInitBean" class="com.jshx.core.init.SysInitBean" lazy-init="false" >
    </bean>
</beans>